<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[php浅谈]]></title>
      <url>http://liushengguang.github.io/2016/06/13/php%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<h4 id="PHP是一门后台编程语言-是目前比较主流的后台编程语言。"><a href="#PHP是一门后台编程语言-是目前比较主流的后台编程语言。" class="headerlink" title="PHP是一门后台编程语言,是目前比较主流的后台编程语言。"></a>PHP是一门后台编程语言,是目前比较主流的后台编程语言。</h4><h3 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h3><h5 id="Apache是Web服务器软件，它可以运行在几乎所有的计算机平台上面，这是最流行的Web服务器软件之一。"><a href="#Apache是Web服务器软件，它可以运行在几乎所有的计算机平台上面，这是最流行的Web服务器软件之一。" class="headerlink" title="Apache是Web服务器软件，它可以运行在几乎所有的计算机平台上面，这是最流行的Web服务器软件之一。"></a>Apache是Web服务器软件，它可以运行在几乎所有的计算机平台上面，这是最流行的Web服务器软件之一。</h5><h5 id="MySQL是关系型数据库管理系统，拥有体积小-速度快-开放源码等优点。"><a href="#MySQL是关系型数据库管理系统，拥有体积小-速度快-开放源码等优点。" class="headerlink" title="MySQL是关系型数据库管理系统，拥有体积小,速度快,开放源码等优点。"></a>MySQL是关系型数据库管理系统，拥有体积小,速度快,开放源码等优点。</h5><h5 id="XAMPP是一个功能强大的建-Apache-MySQL-PHP-Perl-软件站集成软件包，引入XAMPP的目的-手动安装Apache-MySQL-PHP环-境过于复杂-而XAMPP帮我们集成了这个环境-只需-点击安装即可。"><a href="#XAMPP是一个功能强大的建-Apache-MySQL-PHP-Perl-软件站集成软件包，引入XAMPP的目的-手动安装Apache-MySQL-PHP环-境过于复杂-而XAMPP帮我们集成了这个环境-只需-点击安装即可。" class="headerlink" title="XAMPP是一个功能强大的建 (Apache+MySQL+PHP+Perl)软件站集成软件包，引入XAMPP的目的:手动安装Apache+MySQL+PHP环 境过于复杂,而XAMPP帮我们集成了这个环境,只需 点击安装即可。"></a>XAMPP是一个功能强大的建 (Apache+MySQL+PHP+Perl)软件站集成软件包，引入XAMPP的目的:手动安装Apache+MySQL+PHP环 境过于复杂,而XAMPP帮我们集成了这个环境,只需 点击安装即可。</h5><a id="more"></a>
<h3 id="php基本语法"><a href="#php基本语法" class="headerlink" title="php基本语法"></a>php基本语法</h3><h4 id="php标记"><a href="#php标记" class="headerlink" title="php标记"></a>php标记</h4><p>&lt;?php</p>
<p>你的php代码写这</p>
<p>?&gt;</p>
<h4 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h4><p>变量以$开头,后面跟变量名</p>
<p>变量只能由字母,数字,下划线组成,不以数字开头</p>
<p>变量名区分大小写</p>
<p>php于javascript类似是弱类型语言,不需要事先声明变量的数据类型</p>
<h4 id="变量的变量"><a href="#变量的变量" class="headerlink" title="变量的变量"></a>变量的变量</h4><p>$var_1 = “hello”; $$var_1 = “world”;</p>
<p>echo $var_1; //输出hello </p>
<p>echo $hello; //输出world </p>
<p>echo ${$var_1} //输出world</p>
<h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p>php提供了很多预定义的变量,用于提供大量与环境有关的信息，打印/输出超全局变量:prient_r($_SERVER)</p>
<h4 id="1-SERVER-服务器变量-该全局变量包含着服务器和客户端配置及当前请求环境的有关信息"><a href="#1-SERVER-服务器变量-该全局变量包含着服务器和客户端配置及当前请求环境的有关信息" class="headerlink" title="(1)$_SERVER 服务器变量, 该全局变量包含着服务器和客户端配置及当前请求环境的有关信息"></a>(1)$_SERVER 服务器变量, 该全局变量包含着服务器和客户端配置及当前请求环境的有关信息</h4><p>$_SERVER[‘SERVER_NAME’]; 当前运行脚本所在的服务器的主机名 </p>
<p>$_SERVER[‘REMOTE_ADDR’]: 客户端IP地址  </p>
<p>$_SERVER[‘REQUEST_URI’]: URL的路径部分      </p>
<p>$_SERVER[‘HTTP_USER_AGENT’]: 操作系统和浏览器的有关信息</p>
<h4 id="2-GET-该变量包含使用-GET-方法传递的参数的有关信息"><a href="#2-GET-该变量包含使用-GET-方法传递的参数的有关信息" class="headerlink" title="(2)$_GET 该变量包含使用 GET 方法传递的参数的有关信息"></a>(2)$_GET 该变量包含使用 GET 方法传递的参数的有关信息</h4><p>例:url: <a href="http://localhost/test.php?id=100&amp;page=2" target="_blank" rel="external">http://localhost/test.php?id=100&amp;page=2</a> </p>
<p>$id = $_GET[‘id’];</p>
<p>$page = $_GET[‘page’];</p>
<h4 id="3-POST-该变量包含使用-POST-方法传递的参数的有关信息"><a href="#3-POST-该变量包含使用-POST-方法传递的参数的有关信息" class="headerlink" title="(3)$_POST 该变量包含使用 POST 方法传递的参数的有关信息"></a>(3)$_POST 该变量包含使用 POST 方法传递的参数的有关信息</h4><p>例:html:<br>&lt;form name=”reg” action=”test.php” method=”post”&gt; 用户名:&lt;input type=”text” name=”username” /&gt; 密码: &lt;input type=”password” name=”passwd”/&gt; &lt;input type=”submit” value=”提交” /&gt;</p>
<form name="reg" action="test.php" method="post"> 用户名:<input type="text" name="username"> 密码: &lt;input type=”password” name=”passwd”/&gt; <input type="submit" value="提交"><br></form>

<p>php:</p>
<p>$username = $_POST[‘username’]; </p>
<p>$passwd = $_POST[‘passwd’];</p>
<h4 id="4-REQUEST-该变量记录着通过各种输入方法传递给脚本的变量"><a href="#4-REQUEST-该变量记录着通过各种输入方法传递给脚本的变量" class="headerlink" title="(4)$_REQUEST 该变量记录着通过各种输入方法传递给脚本的变量"></a>(4)$_REQUEST 该变量记录着通过各种输入方法传递给脚本的变量</h4><p>如GET POST, 但不要用这个超级全局变量,因为它不安全而且速度比较慢</p>
<h4 id="5-COOKIE-cookie变量数组"><a href="#5-COOKIE-cookie变量数组" class="headerlink" title="(5)$_COOKIE cookie变量数组"></a>(5)$_COOKIE cookie变量数组</h4><h4 id="6-SESSION-会话变量数组"><a href="#6-SESSION-会话变量数组" class="headerlink" title="(6)$_SESSION 会话变量数组"></a>(6)$_SESSION 会话变量数组</h4><h4 id="7-FILES-与上传文件有关的变量数组"><a href="#7-FILES-与上传文件有关的变量数组" class="headerlink" title="(7)$_FILES 与上传文件有关的变量数组"></a>(7)$_FILES 与上传文件有关的变量数组</h4><h4 id="8-ENV-环境变量数组"><a href="#8-ENV-环境变量数组" class="headerlink" title="(8)$_ENV 环境变量数组"></a>(8)$_ENV 环境变量数组</h4><h4 id="9-GLOBALS-所有全局变量数组"><a href="#9-GLOBALS-所有全局变量数组" class="headerlink" title="(9)$GLOBALS 所有全局变量数组"></a>(9)$GLOBALS 所有全局变量数组</h4><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="1、内置常量"><a href="#1、内置常量" class="headerlink" title="1、内置常量"></a>1、内置常量</h4><p>PHP_OS php所在操作系统的名称 </p>
<p>PHP_VERSION 当前php的版本号</p>
<h4 id="2、魔术常量"><a href="#2、魔术常量" class="headerlink" title="2、魔术常量"></a>2、魔术常量</h4><p><strong>LINE</strong> 文件中的当前行号;</p>
<p><strong>FILE</strong> 文件的完整路径和文件名;</p>
<p><strong>FUNCTION</strong> 函数名称; </p>
<p><strong>CLASS</strong> 类的名称; </p>
<p><strong>METHOD</strong> 类的方法名;</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="标量数据类型"><a href="#标量数据类型" class="headerlink" title="标量数据类型"></a>标量数据类型</h4><p>1、字符串</p>
<p>字符串有三种定义方式:单引号,双引号,定界符(heredoc);单引号字符串中出现的变量不会被变量的值替代；双引号字符串中的变量会被变量值替代。</p>
<p>2、整型integer</p>
<p>3、浮点型float</p>
<p>4、布尔型bool</p>
<h4 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h4><p>5、数组</p>
<p>6、对象</p>
<h4 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h4><p>7、文件</p>
<p>8、null</p>
<h4 id="类型相关函数"><a href="#类型相关函数" class="headerlink" title="类型相关函数"></a>类型相关函数</h4><p>1.gettype() 返回变量的类型，共有8个可能的值 string integer float boolean array  object null unknow。</p>
<p>2.is_type()查看变量是否属于某个类型,是返回TRUE ,否返回FALSE;</p>
<p>3.var_dump()获取变量的值和类型的详细信息</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h4><p>+加法运算符</p>
<p>-加法运算符</p>
<p>*乘法运算符</p>
<p>/除法运算符</p>
<p>%取模运算符(求余数)</p>
<h4 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h4><p>$a = 5  赋值</p>
<p>$a += 5  加法赋值  </p>
<p>$a -= 5  减法赋值</p>
<p>$a *= 5  乘法赋值</p>
<p>$a /= 5  除法赋值</p>
<p>$a .= 5  拼接赋值</p>
<h4 id="三、字符串运算"><a href="#三、字符串运算" class="headerlink" title="三、字符串运算"></a>三、字符串运算</h4><p>字符串运算符用于拼接字符串//.表示拼接前后两个字符串</p>
<h4 id="四、递增与递减"><a href="#四、递增与递减" class="headerlink" title="四、递增与递减"></a>四、递增与递减</h4><p>++$i 先给$i的值加1，再返回$i;</p>
<p>$i++ 先返回$i,再给$i的值加1;</p>
<p>–$i 先给$i的值减1，再返回$i;</p>
<p>$i– 先返回$i,再给$i的值减1;</p>
<h4 id="五、逻辑运算符"><a href="#五、逻辑运算符" class="headerlink" title="五、逻辑运算符"></a>五、逻辑运算符</h4><p>&amp;&amp;  and  逻辑与  </p>
<p>||  or   逻辑或</p>
<p>!         逻辑非 </p>
<p>xor,     异或（有且仅有一个为true，则返回true） </p>
<h4 id="六、比较运算符"><a href="#六、比较运算符" class="headerlink" title="六、比较运算符"></a>六、比较运算符</h4><p>大于  小于  大于或等于  小于或等于  不等于  双等于 全等于  全不等</p>
<h4 id="七、三元运算符"><a href="#七、三元运算符" class="headerlink" title="七、三元运算符"></a>七、三元运算符</h4><p>语法： expression1 ? expression2 : expression3  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典JS面试题]]></title>
      <url>http://liushengguang.github.io/2016/05/23/%E7%BB%8F%E5%85%B8JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<pre><code>function Foo() {

getName = function () { alert (1); };

return this;

}
Foo.getName = function () { alert (2);};

Foo.prototype.getName = function () { alert (3);};

var getName = function () { alert (4);};

function getName() { alert (5);}
</code></pre><p>请写出以下输出结果：</p>
<p>Foo.getName();2</p>
<p>getName();4</p>
<p>Foo().getName();1</p>
<p>getName();1</p>
<p>new Foo.getName();2</p>
<p>new Foo().getName();3</p>
<p>new new Foo().getName();3<br><a id="more"></a><br>第一问的 Foo.getName 自然是访问Foo函数上存储的静态属性，自然是2，没什么可说的。</p>
<p>第二问，直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。此题有无数面试者回答为5。此处有两个坑，一是变量声明提升，二是函数表达式。</p>
<p>所有声明变量或声明函数都会被提升到当前函数的顶部。</p>
<p>第三问的 Foo().getName(); 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。</p>
<p>Foo函数的第一句  getName = function () { alert (1); };  是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 function(){alert(1)}。</p>
<p>第四问，直接调用getName函数，相当于 window.getName() ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1。</p>
<p>第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。点（.）的优先级高于new操作，遂相当于是:new (Foo.getName)();</p>
<p>第六问 new Foo().getName() ，首先看运算符优先级括号高于new，实际执行为(new Foo()).getName()。原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。</p>
<p>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了，输出3。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrap的使用]]></title>
      <url>http://liushengguang.github.io/2016/05/18/Bootstrap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="下载Bootstrap"><a href="#下载Bootstrap" class="headerlink" title="下载Bootstrap"></a>下载Bootstrap</h3><p>Bootstrap （当前版本 v3.3.5）提供以下几种方式帮你快速上手，每一种方式针对具有不同技能等级的开发者和不同的使用场景。<br><a href="http://www.bootcss.com/" target="_blank" rel="external">点击这里下载</a><br><a id="more"></a><img src="http://i2.buimg.com/59e681849b5f0e4a.png" alt=""></p>
<p>在href和src里添加http，就可以直接引用了。</p>
<p>使用以下给出的这份超级简单的 HTML 模版</p>
<p><img src="http://i2.buimg.com/e842a88fc78597eb.png" alt=""></p>
<h3 id="Bootstrap使用"><a href="#Bootstrap使用" class="headerlink" title="Bootstrap使用"></a>Bootstrap使用</h3><h4 id="1、使用方法介绍"><a href="#1、使用方法介绍" class="headerlink" title="1、使用方法介绍"></a>1、使用方法介绍</h4><h5 id="1、全局样式style-css"><a href="#1、全局样式style-css" class="headerlink" title="1、全局样式style.css"></a>1、全局样式style.css</h5><p><cite>移除body的margin声明,设置body的背景色为白色,为排版设置了基本的字体、字号和行高,设置全局链接颜色，且当链接处于悬浮“:hover”状态时才会显示下划线样式.<cite></cite></cite></p>
<h5 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h5><p><cite>重置了h1~h6的默认样式，标题类名 .h1~h6，副标题 small<cite></cite></cite></p>
<h5 id="3、强调内容"><a href="#3、强调内容" class="headerlink" title="3、强调内容"></a>3、强调内容</h5><p>.lead 一般配合段落标签使用&lt;small&gt;，&lt;strong&gt;，&lt;b&gt;，&lt;em&gt;，&lt;i&gt;，&lt;cite&gt;</p>
<p><cite>强调相关的类text-muted：提示，使用浅灰色（#999），text-primary：主要，使用蓝色（#428bca），text-success：成功，使用浅绿色(#3c763d)，text-info：通知信息，使用浅蓝色（#31708f），text-warning：警告，使用黄色（#8a6d3b），text-danger：危险，使用褐色（#a94442）。<cite></cite></cite></p>
<h5 id="4、文本对齐风格的类"><a href="#4、文本对齐风格的类" class="headerlink" title="4、文本对齐风格的类"></a>4、文本对齐风格的类</h5><p><cite>.text-left：左对齐.text-center：居中对齐.text-right：右对齐.text-justify：两端对齐<cite></cite></cite></p>
<h5 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h5><p><cite>ul ol，去序列的类.list-unstyled;<br>ul ol 水平列表的类.list-inline把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示;<br>dl 水平列表的类.dl-horizontal屏幕大于768px的时候，添加类名“.dl-horizontal”才具有水平定义列表效果<cite></cite></cite></p>
<h4 id="2、图片"><a href="#2、图片" class="headerlink" title="2、图片"></a>2、图片</h4><h5 id="1、使用方法非常简单，只需要在标签上添加对应的类名"><a href="#1、使用方法非常简单，只需要在标签上添加对应的类名" class="headerlink" title="1、使用方法非常简单，只需要在标签上添加对应的类名"></a>1、使用方法非常简单，只需要在<img>标签上添加对应的类名</h5><h5 id="2、img-responsive：响应式图片，主要针对于响应式设计"><a href="#2、img-responsive：响应式图片，主要针对于响应式设计" class="headerlink" title="2、img-responsive：响应式图片，主要针对于响应式设计"></a>2、img-responsive：响应式图片，主要针对于响应式设计</h5><h5 id="3、img-rounded：圆角图片"><a href="#3、img-rounded：圆角图片" class="headerlink" title="3、img-rounded：圆角图片"></a>3、img-rounded：圆角图片</h5><h5 id="4、img-circle：圆形图片"><a href="#4、img-circle：圆形图片" class="headerlink" title="4、img-circle：圆形图片"></a>4、img-circle：圆形图片</h5><h5 id="5、img-thumbnail：缩略图片"><a href="#5、img-thumbnail：缩略图片" class="headerlink" title="5、img-thumbnail：缩略图片"></a>5、img-thumbnail：缩略图片</h5><h4 id="3、图标"><a href="#3、图标" class="headerlink" title="3、图标"></a>3、图标</h4><h5 id="1、点击这里是图标大全查看图标名"><a href="#1、点击这里是图标大全查看图标名" class="headerlink" title="1、点击这里是图标大全查看图标名"></a>1、点击<a href="http://getbootstrap.com/components/#glyphicons" target="_blank" rel="external">这里是图标大全</a>查看图标名</h5><h5 id="2、使用任何行级元素都可以，通常使用span标签坐图标容器，在Bootstrap框架中是通过给元素添加“glyphicon”类名来实现。"><a href="#2、使用任何行级元素都可以，通常使用span标签坐图标容器，在Bootstrap框架中是通过给元素添加“glyphicon”类名来实现。" class="headerlink" title="2、使用任何行级元素都可以，通常使用span标签坐图标容器，在Bootstrap框架中是通过给元素添加“glyphicon”类名来实现。"></a>2、使用任何行级元素都可以，通常使用span标签坐图标容器，在Bootstrap框架中是通过给元素添加“glyphicon”类名来实现。</h5><h4 id="4、表格"><a href="#4、表格" class="headerlink" title="4、表格"></a>4、表格</h4><h5 id="1、基础表格类-table"><a href="#1、基础表格类-table" class="headerlink" title="1、基础表格类.table"></a>1、基础表格类.table</h5><p><cite>给表格设置了margin-bottom:20px以及设置单元内距;在thead底部设置了一个2px的浅灰实线;每个单元格顶部设置了一个1px的浅灰实线<cite></cite></cite></p>
<h5 id="2、附加样式表类"><a href="#2、附加样式表类" class="headerlink" title="2、附加样式表类"></a>2、附加样式表类</h5><p><cite>.table-striped：斑马线表格.table-bordered：带边框的表格.table-hover：鼠标悬停高亮的表格.table-condensed：紧凑型表格<cite></cite></cite></p>
<h5 id="3、响应式表格"><a href="#3、响应式表格" class="headerlink" title="3、响应式表格"></a>3、响应式表格</h5><p><cite>.table-responsive&lt;div class=“table-responsive”&gt;&lt;table class=“table table-bordered”&gt;<br>Bootstrap提供了一个容器，并且此容器设置类名“.table-responsive”,此容器就具有响应式效果，然后将&lt;table class=“table”&gt;置于这个容器当中，这样表格也就具有响应式效果<cite></cite></cite></p>
<p><cite>当你的浏览器可视区域小于768px时，表格底部会出现水平滚动条。当你的浏览器可视区域大于768px时，表格底部水平滚动条就会消失.<cite></cite></cite></p>
<h4 id="5、表单"><a href="#5、表单" class="headerlink" title="5、表单"></a>5、表单</h4><h5 id="1、基础表单"><a href="#1、基础表单" class="headerlink" title="1、基础表单"></a>1、基础表单</h5><p><cite>input、select、textarea等元素设置form-control类：宽度变成了100%设置了一个浅灰色（#ccc）的边框；具有4px的圆角；设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化；设置了placeholder的颜色为#999;form-group就是一个产生:margin-bottom=15px;的效果<cite></cite></cite></p>
<h5 id="2、input"><a href="#2、input" class="headerlink" title="2、input"></a>2、input</h5><p><cite>必须带有type，多使用form-control类；input-sm:让控件比正常大小更小；input-lg:让控件比正常大小更大；不设置就是正常大小；<cite></cite></cite></p>
<h5 id="3、select"><a href="#3、select" class="headerlink" title="3、select"></a>3、select</h5><p><cite>默认选择一个选项，多使用form-control;多行选择的话,设置multiple属性&lt;select multiple class=“form-control”&gt;<cite></cite></cite></p>
<h5 id="4、textarea"><a href="#4、textarea" class="headerlink" title="4、textarea"></a>4、textarea</h5><p><cite>设置rows可定义其高度，设置cols可以设置其宽度。但如果textarea元素中添加了类名“form-control”类名，则无需设置cols属性<cite></cite></cite></p>
<h5 id="5、单选框，多选框"><a href="#5、单选框，多选框" class="headerlink" title="5、单选框，多选框"></a>5、单选框，多选框</h5><p><cite>日常开发最头痛的是控件与文字对齐问题,bootstrap无需关心这个问题。<cite></cite></cite></p>
<p><img src="http://i2.buimg.com/f466b0b729879107.png" alt=""></p>
<p><cite>如果checkbox需要水平排列，只需要在label标签上添加类名“checkbox-inline”如果radio需要水平排列，只需要在label标签上添加类名“radio-inline<cite></cite></cite></p>
<h5 id="6、按钮"><a href="#6、按钮" class="headerlink" title="6、按钮"></a>6、按钮</h5><p><cite>默认按钮：Bootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格，然后通过“.btn-default”定义了一个默认的按钮风格。默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色。<cite></cite></cite></p>
<p><cite>.btn类还支持a标签，type-submit的input标签;.btn-primary主要按钮;btn-success成功按钮;btn-warning警告按钮;btn-danger危险按钮;btn-link链接按钮<cite></cite></cite></p>
<p><cite>按钮大小:.bth-lg大型按钮;btn-sm小型按钮;btn-xs超小型按钮<cite></cite></cite></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jade基本语法介绍]]></title>
      <url>http://liushengguang.github.io/2015/12/17/jade%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<pre><code>之前在博客中介绍了jade模版，在接下来的使用过程中，越来越觉得语法规范化的重要，今天抽空在这里总结一下这些天

使用jade模版的心得。
</code></pre><h3 id="tag标签"><a href="#tag标签" class="headerlink" title="tag标签"></a>tag标签</h3><a id="more"></a>
<pre><code>标签都是通过TAB缩进，来代替HTML中的层级包含关系

1、内联书写层级

a、img标签 通过分号区分元素内内容

2、自闭合标签

img、meta、link等自闭合标签会自动识别，也可在标签后添加/强制输出自闭合元素
</code></pre><h3 id="style属性"><a href="#style属性" class="headerlink" title="style属性"></a>style属性</h3><pre><code>图中已完美呈现：
</code></pre><p><img src="http://i2.buimg.com/ad2c31dddb2630ac.png" alt=""></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre><code>使用“=”输出变量值到元素内
</code></pre><p><img src="http://i3.buimg.com/3756e05d5c6c77e1.png" alt=""></p>
<pre><code>通过 #{variable} 插入相应的变量值
</code></pre><p><img src="http://i3.buimg.com/a76c3fe55ede6659.png" alt=""></p>
<pre><code>这个没怎么用到，先提一提！
</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>html 元素属性通过在标签右边通过括号包含（此处逗号可拆分为多行书写属性的格式）
</code></pre><p><img src="http://i3.buimg.com/3d2b6547ccac5e80.png" alt=""></p>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><pre><code>通过在文字前面添加竖线符号“|”可让 jade 原样输出内容

在html标签标记后面通过空格隔开文本内容

在html标签标记后通过添加英文句号“.”添加块级文本

上面3个形式的方式效果为：
</code></pre><p><img src="http://i2.buimg.com/03aaf3cdaf2fcf42.png" alt=""></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>可以通过双斜杠进行注释，jade有3种注释方式，可以分别对应输出html注释、不输出html注

释、块级html注释：
</code></pre><p><img src="http://i4.buimg.com/e03acb3fb5070e2e.png" alt=""></p>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><pre><code>jade支持通过js语法形式运行一些表达式，最简单常用的就一个迭代可以表达为：
</code></pre><p><img src="http://i4.buimg.com/19d7527fdf4c7c50.png" alt=""></p>
<p>是不是很好用！！！</p>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><pre><code>jade 支持 if 、case条件判断，类比js的相应语法：
</code></pre><p><img src="http://i4.buimg.com/612ab8fed6ddbab9.png" alt=""></p>
<p>js可以直接写在里面，是不是很神奇！！！</p>
<h3 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h3><pre><code>include.jade文件
</code></pre><p><img src="http://i4.buimg.com/477132afb83b0227.png" alt=""></p>
<pre><code>head.jade文件
</code></pre><p><img src="http://i4.buimg.com/d9f5870bbf65b825.png" alt=""></p>
<pre><code>包含文件
</code></pre><p><img src="http://i4.buimg.com/5eb3fcd2f12bbea9.png" alt=""></p>
<h3 id="今天先到这，以后有新内容再更。"><a href="#今天先到这，以后有新内容再更。" class="headerlink" title="今天先到这，以后有新内容再更。"></a>今天先到这，以后有新内容再更。</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习使用gulp-jade模板引擎]]></title>
      <url>http://liushengguang.github.io/2015/11/19/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8gulp-jade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>Jade是一个基于javascript，可以运行在node与浏览器环境的一个前端模板引擎，对于日益庞大的前端页面<br>来说，还是用老的字符串拼接的方法来嵌入html内容已经不适应当下的开发趋势了。</p>
<h3 id="1、安装gulp-jade"><a href="#1、安装gulp-jade" class="headerlink" title="1、安装gulp-jade"></a>1、安装gulp-jade</h3><a id="more"></a>
<p>jade基于nodejs的开发环境，所以我们首先要安装nodejs,nodejs的安装方法<a href="http://www.tuicool.com/articles/FJVNZf" target="_blank" rel="external">这里有更详尽的步骤</a>其实在之前的博客中已经提及了，这里就不在赘述了，<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a>可以直接下载安装包。</p>
<p>安装gulp-jade插件，命令：$ npm install -g –save-dev gulp-jade<br>    如果需要权限就在npm之前加上sudo。</p>
<h3 id="2、使用gulp-jade来构建前端模版"><a href="#2、使用gulp-jade来构建前端模版" class="headerlink" title="2、使用gulp-jade来构建前端模版"></a>2、使用gulp-jade来构建前端模版</h3><pre><code>创建一个名为jade的文件夹，在文件夹里创建一个名为jade.jade的文件。在jade.jade文件内写上jade规模的模版代码，如下：
</code></pre><p><img src="http://i2.buimg.com/ebc79103a7bd6b6e.png" alt=""></p>
<p>在jade文件夹同级文件里找到或创建一个名为gulpfile.js的文件，编辑如下内容：<br><img src="http://i2.buimg.com/619879541b38d409.png" alt=""></p>
<p>在jade文件夹中运行gulp-jade，命令：$ gulp jade </p>
<p>看下在新生成的newhtml文件夹下生成的jade.html：<br><img src="http://i4.buimg.com/b0843e3bc8b92377.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[伪类的用法]]></title>
      <url>http://liushengguang.github.io/2015/11/12/%E4%BC%AA%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>爱恨法则记忆：</p>
<p>love:link,visited;</p>
<p>hate:hover,active;</p>
<a id="more"></a>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>first-line</p>
<p>first-letter</p>
<p>selection</p>
<p>before</p>
<p>after</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何使用gulp对文件进行压缩]]></title>
      <url>http://liushengguang.github.io/2015/10/06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gulp%E5%AF%B9%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9/</url>
      <content type="html"><![CDATA[<h3 id="gulp的安装"><a href="#gulp的安装" class="headerlink" title="gulp的安装"></a>gulp的安装</h3><p>1、创建项目文件夹，然后项目初始化：$ npm init ;</p>
<p>2、全局安装gulp：$ npm install –global gulp ;</p>
<p>3、作为项目的开发依赖（devDependencies）安装：$ npm install –save-dev gulp ;<br><a id="more"></a><br>4、在创建的文件夹下，创建一个名为gulpfile.js的文件，内容为：</p>
<p>var gulp=require(‘gulp’)</p>
<p>gulp.task(‘default’,function(){//将你的任务代码放在这})</p>
<p>5、运行gulp：$ gulp </p>
<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</p>
<p>想要单独执行特定的任务（task），请输入 gulp <task> <othertask>。</othertask></task></p>
<h3 id="文件合并gulp-concat的用法"><a href="#文件合并gulp-concat的用法" class="headerlink" title="文件合并gulp-concat的用法"></a>文件合并gulp-concat的用法</h3><p>1、安装：$ sudo npm install gulp-concat –save-dev gulp</p>
<p>2、在gulpfile.js文件中加入：</p>
<p>var concat = require(‘gulp-concat’);//调用gulp的concat插件</p>
<p>gulp.task(‘default’, function() {//任务</p>
<p>  return gulp.src(‘index/*.js’)//获取index文件夹需要合并的</p>
<p>  js文件的地址</p>
<p>  .pipe(concat(‘all.js’))//合并到新文件all.js中</p>
<p>  .pipe(gulp.dest(‘new/‘));//新文件放到new文件夹下</p>
<p>});</p>
<p>3、运行gulp：默认执行default函数</p>
<h3 id="js代码压缩gulp-jsmin的用法"><a href="#js代码压缩gulp-jsmin的用法" class="headerlink" title="js代码压缩gulp-jsmin的用法"></a>js代码压缩gulp-jsmin的用法</h3><p>1、安装：$ sudo npm install gulp-jsmin –save-dev gulp</p>
<p>2、在gulpfile.js文件中加入：</p>
<p>var jsmin=requir(‘gulp-jsmin’);;//调用gulp的jsmin插件</p>
<p>gulp.task(‘default’, function() {//任务</p>
<p>  return gulp.src(‘index/*.js’)//获取index文件夹需要合并的</p>
<p>  js文件的地址</p>
<p>  .pipe(concat(‘all.js’))//合并到新文件all.js中</p>
<p>  .pipe(jsmin())//将js文件进行最小化压缩</p>
<p>  .pipe(gulp.dest(‘new/‘));//新文件放到new文件夹下</p>
<p>});</p>
<p>3、运行gulp：默认执行default函数</p>
<h3 id="HTML代码压缩"><a href="#HTML代码压缩" class="headerlink" title="HTML代码压缩"></a>HTML代码压缩</h3><p>1、安装：$ sudo npm install gulp-htmlmin –save-dev gulp</p>
<p>2、在gulpfile.js文件中加入：</p>
<p>var jsmin=requir(‘gulp-htmlmin’);;//调用gulp的htmlmin插件</p>
<p>gulp.task(‘default’, function() {//任务</p>
<p>  return gulp.src(‘index/*.html’)//获取index文件夹下html文件的地址</p>
<p>  .pipe(htmlmin({collapseWhitespace: true}))//将html文件进行最小化压缩</p>
<p>  .pipe(gulp.dest(‘new/‘));//新文件放到new文件夹下</p>
<p>});</p>
<p>3、运行gulp：默认执行default函数</p>
<h3 id="css代码压缩"><a href="#css代码压缩" class="headerlink" title="css代码压缩"></a>css代码压缩</h3><p>1、安装：$ sudo npm install gulp-cssmin –save-dev gulp</p>
<p>2、在gulpfile.js文件中加入：</p>
<p>var jsmin=requir(‘gulp-cssmin’);;//调用gulp的cssmin插件</p>
<p>gulp.task(‘default’, function() {//任务</p>
<p>  return gulp.src(‘index/*.css’)//获取index文件夹下css文件的地址</p>
<p>  .pipe(cssmin())//将css文件进行最小化压缩</p>
<p>  .pipe(gulp.dest(‘new/‘));//新文件放到new文件夹下</p>
<p>});</p>
<p>3、运行gulp：默认执行default函数</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[创建git仓库]]></title>
      <url>http://liushengguang.github.io/2015/08/29/%E5%88%9B%E5%BB%BAgit%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="注册git设置用户名和邮箱地址"><a href="#注册git设置用户名和邮箱地址" class="headerlink" title="注册git设置用户名和邮箱地址"></a>注册git设置用户名和邮箱地址</h3><p>1、git config –global user.name “Your Name”#配置用户名</p>
<p>2、git config –global user.email “email@example.com”#配置邮箱<br><a id="more"></a></p>
<h3 id="服务器上的Git-生成SSH公钥"><a href="#服务器上的Git-生成SSH公钥" class="headerlink" title="服务器上的Git - 生成SSH公钥"></a>服务器上的Git - 生成SSH公钥</h3><p>登陆github生成SSHkey公钥<br>ssh-keygen 会确认密钥的存储位置（默认是 .ssh/id_rsa），然后它会要求</p>
<p>你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。</p>
<p>vim ~/.ssh/id_rsa.pub 显示.pub 文件内容（即key）</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建新文件夹，进入</p>
<p>git init //以创建新的 git 仓库</p>
<h3 id="添加提交"><a href="#添加提交" class="headerlink" title="添加提交"></a>添加提交</h3><p>git clone      #创建一个本地仓库的克隆版本</p>
<p>git status      #查看当前的仓库状态</p>
<p>git add .     #生成快照并存入项目索引</p>
<p>git commit -m “修改说明”   #改动项目提交到暂存区</p>
<p>git push -u origin master #改动提交到远端仓库</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>初次创建账户之后，以后每次添加，只需要执行git add .之后的命令</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs的运用]]></title>
      <url>http://liushengguang.github.io/2015/08/10/node-js%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://25.io/mou/" target="_blank" rel="external">http://25.io/mou/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用hexo搭建github博客]]></title>
      <url>http://liushengguang.github.io/2015/07/26/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="1、hexo介绍、运行环境"><a href="#1、hexo介绍、运行环境" class="headerlink" title="1、hexo介绍、运行环境"></a>1、hexo介绍、运行环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。</span><br><span class="line">Nodejs安装：下载：http://nodejs.org/download/</span><br></pre></td></tr></table></figure>
<h3 id="2、配置Github"><a href="#2、配置Github" class="headerlink" title="2、配置Github"></a>2、配置Github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">建立Repository:建立与你用户名对应的仓库，仓库名必须为“your_user_name.github.io”</span><br><span class="line">Repository：必须是SSH形式的url（git@github.com:zhchnchn/zhchnchn.github.io.git），而不能是HTTPS形式的</span><br><span class="line">配置SHH-Key</span><br><span class="line">安装命令install node</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3、Hexo安装与设置"><a href="#3、Hexo安装与设置" class="headerlink" title="3、Hexo安装与设置"></a>3、Hexo安装与设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装命令npm install -g hexo;-g表示全局安装；</span><br><span class="line">hexo init执行init命令初始化hexo到你指定的目录；</span><br><span class="line">hexo generate自动根据当前目录下文件,生成静态网页；</span><br><span class="line">hexo server运行本地服务；</span><br><span class="line">浏览器输入http://localhost:4000就可以看到效果。</span><br><span class="line">你可以按Ctrl+C 停止Server</span><br></pre></td></tr></table></figure>
<h3 id="4、添加博文"><a href="#4、添加博文" class="headerlink" title="4、添加博文"></a>4、添加博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> 新建博文,其中postName是博文题目</span><br><span class="line">博文会自动生成在博客目录下<span class="built_in">source</span>/_posts\postName.md</span><br></pre></td></tr></table></figure>
<h3 id="5、主题更改"><a href="#5、主题更改" class="headerlink" title="5、主题更改"></a>5、主题更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">个性化博客的设置，在博客的根目录下对喜爱的主题进行主题进行克隆</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:yunlzheng/hexo-themes.git themes/writing；</span><br><span class="line">在./_config.yml，修改主题为writing；theme: writing</span><br></pre></td></tr></table></figure>
<h3 id="6、部署到github"><a href="#6、部署到github" class="headerlink" title="6、部署到github"></a>6、部署到github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以上内容都是在本地进行查看, 现在将博客部署到github上</span><br><span class="line">打开./_config.yml</span><br><span class="line">找到 </span><br><span class="line">Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br><span class="line">改为</span><br><span class="line"><span class="built_in">type</span>: github</span><br><span class="line">repository: git@github.com:zhchnchn/zhchnchn.github.io.git</span><br><span class="line">branch:</span><br></pre></td></tr></table></figure>
<h3 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h3><pre><code class="bash">当部署完成后，在浏览器中打开http://zhchnchn.github.io/正常显示网页，表明部署成功。
</code></pre>
<h3 id="8、总结、部署步骤"><a href="#8、总结、部署步骤" class="headerlink" title="8、总结、部署步骤"></a>8、总结、部署步骤</h3><pre><code class="bash">每次部署的步骤，可按以下三步来进行。
hexo clean
hexo generate
hexo deploy
</code></pre>
<h3 id="9、总结：本地调试"><a href="#9、总结：本地调试" class="headerlink" title="9、总结：本地调试"></a>9、总结：本地调试</h3><pre><code class="bash">在执行下面的命令后hexo g 生成 hexo s 启动本地服务，进行文章预览调试
</code></pre>
<h3 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h3><pre><code class="bash">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span>
hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span>
hexo generate <span class="comment">#生成静态页面至public目录</span>
hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span>
hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span>
hexo version  <span class="comment">#查看Hexo的版本</span>
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客帝国]]></title>
      <url>http://liushengguang.github.io/2015/07/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="http://img.woyaogexing.com/2016/05/10/954c0e42f6aec5ad!600x600.jpg" alt=""></p>
<h3 id="美的事物总是让人忘情"><a href="#美的事物总是让人忘情" class="headerlink" title="美的事物总是让人忘情"></a>美的事物总是让人忘情</h3><a id="more"></a>
<p><br></p>
<h4 id="很高兴你进来了，看到了这些文字。这些写给自己的文字，或许是自己给自己的承诺。"><a href="#很高兴你进来了，看到了这些文字。这些写给自己的文字，或许是自己给自己的承诺。" class="headerlink" title="很高兴你进来了，看到了这些文字。这些写给自己的文字，或许是自己给自己的承诺。"></a>很高兴你进来了，看到了这些文字。这些写给自己的文字，或许是自己给自己的承诺。</h4><p><br></p>
<h4 id="也是在最近创建了自己的个人博客，说说创建博客的目的，自身对互联网方面的东西一"><a href="#也是在最近创建了自己的个人博客，说说创建博客的目的，自身对互联网方面的东西一" class="headerlink" title="也是在最近创建了自己的个人博客，说说创建博客的目的，自身对互联网方面的东西一"></a>也是在最近创建了自己的个人博客，说说创建博客的目的，自身对互联网方面的东西一</h4><h4 id="直挺感兴趣-刚好又想找一种方式来记录一下自己工作中经历的点滴。由于阿里云收费"><a href="#直挺感兴趣-刚好又想找一种方式来记录一下自己工作中经历的点滴。由于阿里云收费" class="headerlink" title="直挺感兴趣,刚好又想找一种方式来记录一下自己工作中经历的点滴。由于阿里云收费"></a>直挺感兴趣,刚好又想找一种方式来记录一下自己工作中经历的点滴。由于阿里云收费</h4><h4 id="不符合我屌丝的气质，就想到了免费的github，这才符合我2B青年的习惯。"><a href="#不符合我屌丝的气质，就想到了免费的github，这才符合我2B青年的习惯。" class="headerlink" title="不符合我屌丝的气质，就想到了免费的github，这才符合我2B青年的习惯。"></a>不符合我屌丝的气质，就想到了免费的github，这才符合我2B青年的习惯。</h4><p><br></p>
<h4 id="搭建好博客之后，心里莫名的小激动，有种想要把博客分享给所有人的冲动。但是这些"><a href="#搭建好博客之后，心里莫名的小激动，有种想要把博客分享给所有人的冲动。但是这些" class="headerlink" title="搭建好博客之后，心里莫名的小激动，有种想要把博客分享给所有人的冲动。但是这些"></a>搭建好博客之后，心里莫名的小激动，有种想要把博客分享给所有人的冲动。但是这些</h4><h4 id="只是一时的想法，我要做的是自己默默更新，默默积累经验。"><a href="#只是一时的想法，我要做的是自己默默更新，默默积累经验。" class="headerlink" title="只是一时的想法，我要做的是自己默默更新，默默积累经验。"></a>只是一时的想法，我要做的是自己默默更新，默默积累经验。</h4><p><br></p>
<h4 id="在个人博客搭建好的同时，突然萌发了创建个人电台的想法，这个想法之前也有过，总"><a href="#在个人博客搭建好的同时，突然萌发了创建个人电台的想法，这个想法之前也有过，总" class="headerlink" title="在个人博客搭建好的同时，突然萌发了创建个人电台的想法，这个想法之前也有过，总"></a>在个人博客搭建好的同时，突然萌发了创建个人电台的想法，这个想法之前也有过，总</h4><h4 id="会因为各种各样的事情耽搁了，今天又把她提上日程了。其实我想法很单纯，寻找多一种"><a href="#会因为各种各样的事情耽搁了，今天又把她提上日程了。其实我想法很单纯，寻找多一种" class="headerlink" title="会因为各种各样的事情耽搁了，今天又把她提上日程了。其实我想法很单纯，寻找多一种"></a>会因为各种各样的事情耽搁了，今天又把她提上日程了。其实我想法很单纯，寻找多一种</h4><h4 id="记录生命色彩的形式，就像许多的社交软件里的私人空间一样，留下了那时我们的文字，"><a href="#记录生命色彩的形式，就像许多的社交软件里的私人空间一样，留下了那时我们的文字，" class="headerlink" title="记录生命色彩的形式，就像许多的社交软件里的私人空间一样，留下了那时我们的文字，"></a>记录生命色彩的形式，就像许多的社交软件里的私人空间一样，留下了那时我们的文字，</h4><h4 id="图片。。。"><a href="#图片。。。" class="headerlink" title="图片。。。"></a>图片。。。</h4><p><br></p>
<h4 id="个人电台现在很容易就可以在一些平台申请到，不容易的是内心对她的持续热度。最怕"><a href="#个人电台现在很容易就可以在一些平台申请到，不容易的是内心对她的持续热度。最怕" class="headerlink" title="个人电台现在很容易就可以在一些平台申请到，不容易的是内心对她的持续热度。最怕"></a>个人电台现在很容易就可以在一些平台申请到，不容易的是内心对她的持续热度。最怕</h4><h4 id="是再美好的事物由于朝夕相处，也会变成最平凡的那个！就像我无法向谁保证，此生只"><a href="#是再美好的事物由于朝夕相处，也会变成最平凡的那个！就像我无法向谁保证，此生只" class="headerlink" title="是再美好的事物由于朝夕相处，也会变成最平凡的那个！就像我无法向谁保证，此生只"></a>是再美好的事物由于朝夕相处，也会变成最平凡的那个！就像我无法向谁保证，此生只</h4><h4 id="爱她一人，我唯一可以做到让她简单、快乐的与我相处。做自己，在我面前做自己，你开"><a href="#爱她一人，我唯一可以做到让她简单、快乐的与我相处。做自己，在我面前做自己，你开" class="headerlink" title="爱她一人，我唯一可以做到让她简单、快乐的与我相处。做自己，在我面前做自己，你开"></a>爱她一人，我唯一可以做到让她简单、快乐的与我相处。做自己，在我面前做自己，你开</h4><h4 id="心，我开心你的开心；你忧伤，我忧伤你的忧伤"><a href="#心，我开心你的开心；你忧伤，我忧伤你的忧伤" class="headerlink" title="心，我开心你的开心；你忧伤，我忧伤你的忧伤"></a>心，我开心你的开心；你忧伤，我忧伤你的忧伤</h4><p><br></p>
<h4 id="真想，不曾看到过你的忧伤"><a href="#真想，不曾看到过你的忧伤" class="headerlink" title="真想，不曾看到过你的忧伤"></a>真想，不曾看到过你的忧伤</h4>]]></content>
    </entry>
    
  
  
</search>
